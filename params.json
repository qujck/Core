{"name":"Core","tagline":"","body":"### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n## [Commands](https://www.cuttingedge.it/blogs/steven/pivot/entry.php?id=91) \r\n\r\n> Actions that change something and return nothing\r\n\r\n```csharp\r\npublic interface ICommandHandler<TCommand> where TCommand : ICommand\r\n{\r\n    void Execute(TCommand command);\r\n}\r\n```\r\n\r\n----------\r\n\r\n## [Queries](https://www.cuttingedge.it/blogs/steven/pivot/entry.php?id=92)\r\n\r\n> Actions that return something and change nothing\r\n\r\n```csharp\r\npublic interface IQuery<TResult>\r\n{\r\n}\r\n\r\npublic interface IQueryHandler<TQuery, TResult> where TQuery : IQuery<TResult>\r\n{\r\n    TResult Execute(TQuery query);\r\n}\r\n```\r\n\r\n----------\r\n\r\n## [Mediators](http://en.wikipedia.org/wiki/Mediator_pattern)\r\n\r\n> A combination of commands and queries\r\n\r\nThere are two mediator abstractions. One that essentially mediates a call to a command and returns nothing\r\n\r\n```csharp\r\npublic interface IMediator\r\n{\r\n}\r\n\r\npublic interface IMediatingHandler<TRequest> where TRequest : IMediator\r\n{\r\n    void Execute(TRequest request);\r\n}\r\n```\r\n\r\nAnd one that mediates the call to a query and returns something\r\n\r\n```csharp\r\npublic interface IMediator<TResult> : IMediator\r\n{\r\n}\r\n\r\npublic interface IMediatingHandler<TRequest, TResult> where TRequest : IMediator<TResult>\r\n{\r\n    TResult Execute(TRequest request);\r\n}\r\n```\r\n\r\n----------\r\n\r\n# Events ([Observers](http://www.dofactory.com/net/observer-design-pattern))\r\n\r\n> Side effects\r\n\r\n```csharp\r\npublic interface IEvent\r\n{\r\n}\r\n\r\npublic interface ISubscriber<TEvent> where TEvent : IEvent\r\n{\r\n    void Handle(TEvent param);\r\n}\r\n```\r\n\r\nThe system has 3 events to cater for _pre_ and _post_ an activity: events are triggered before and after calling each `QueryHandler<,>` and `CommandHandler<>`.\r\n\r\n```csharp\r\npublic sealed class OnBefore<TRequest> : IEvent\r\n{\r\n    public OnBefore(TRequest response)\r\n    {\r\n        this.Request = response;\r\n    }\r\n\r\n    public TRequest Request { get; private set; }\r\n}\r\n\r\npublic sealed class OnAfter<TRequest> : IEvent\r\n{\r\n    public OnAfter(TRequest request)\r\n    {\r\n        this.Request = request;\r\n    }\r\n\r\n    public TRequest Request { get; private set; }\r\n}\r\n\r\npublic sealed class OnAfter<TRequest, TResponse> : IEvent\r\n{\r\n    public OnAfter(TRequest request, TResponse response)\r\n    {\r\n        this.Request = request;\r\n\r\n        this.Response = response;\r\n    }\r\n\r\n    public TRequest Request { get; private set; }\r\n\r\n    public TResponse Response { get; private set; }\r\n}\r\n```\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}